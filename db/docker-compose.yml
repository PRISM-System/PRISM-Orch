# Docker Compose for PRISM Orchestration Database Infrastructure

services:
  # PostgreSQL - Primary database for transaction processing
  postgresql:
    image: postgres:15.0
    container_name: orch_postgresql
    environment:
      POSTGRES_DB: orch_db
      POSTGRES_USER: orch_user
      POSTGRES_PASSWORD: orch_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - orch_network
    restart: unless-stopped

  # Redis - Caching and session management
  redis:
    image: redis:7.0
    container_name: orch_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./db/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - orch_network
    restart: unless-stopped

  # Weaviate - Vector database for knowledge search (simplified configuration)
  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.21.8
    container_name: orch_weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - orch_network
    restart: unless-stopped

  # Kafka - Message queue for agent communication
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: orch_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - orch_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: orch_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - orch_network
    restart: unless-stopped

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: orch_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - orch_network
    restart: unless-stopped

  # Redis Insight for Redis management
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: orch_redis_insight
    ports:
      - "8001:8001"
    networks:
      - orch_network
    restart: unless-stopped

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: orch_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@orch.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - orch_network
    restart: unless-stopped
    depends_on:
      - postgresql

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: orch_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - orch_network
    restart: unless-stopped

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: orch_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - orch_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # PostgreSQL Exporter - PostgreSQL metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: orch_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://orch_user:orch_password@postgresql:5432/orch_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - orch_network
    restart: unless-stopped
    depends_on:
      - postgresql

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: orch_redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "redis_password"
    ports:
      - "9121:9121"
    networks:
      - orch_network
    restart: unless-stopped
    depends_on:
      - redis

  # Kafka Exporter - Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: orch_kafka_exporter
    command:
      - '--kafka.server=kafka:29092'
    ports:
      - "9308:9308"
    networks:
      - orch_network
    restart: unless-stopped
    depends_on:
      - kafka

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: orch_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - orch_network
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: orch_cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8888:8080"
    networks:
      - orch_network
    restart: unless-stopped

volumes:
  postgresql_data:
  redis_data:
  weaviate_data:
  kafka_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

networks:
  orch_network:
    driver: bridge