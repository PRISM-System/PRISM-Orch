#!/usr/bin/env python3
"""
Vector Search Tester using prism-core RAGSearchTool

Î≤°ÌÑ∞ Í∏∞Î∞ò Í≤ÄÏÉâ Í∏∞Îä•ÏùÑ ÌÖåÏä§Ìä∏ÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏ÏûÖÎãàÎã§.
ÏóÖÎ°úÎìúÎêú Î¨∏ÏÑúÎì§ÏùÑ ÎåÄÏÉÅÏúºÎ°ú Îã§ÏñëÌïú ÏøºÎ¶¨Î•º ÌÖåÏä§Ìä∏ÌïòÏó¨ 
Î≤°ÌÑ∞ Ïú†ÏÇ¨ÎèÑ Í≤ÄÏÉâÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
"""

import os
import sys
import json
import logging
import requests
from typing import List, Dict, Any

# Python path setup for local development
sys.path.append('/app/src')
sys.path.append('/app')  # Add for local prism_core

# PRISM-Orch tools import
try:
    from src.orchestration.tools import OrchToolSetup
    ORCH_TOOLS_AVAILABLE = True
    logger_msg = "PRISM-Orch OrchToolSetup ÏÇ¨Ïö©"
except ImportError:
    ORCH_TOOLS_AVAILABLE = False
    logger_msg = "PRISM-Orch tools ÏóÜÏùå - ÏßÅÏ†ë prism-core ÏÇ¨Ïö©"
    # Fallback to direct prism-core import
    try:
        from prism_core.core.tools.rag_search_tool import RAGSearchTool
        from prism_core.core.tools.schemas import ToolRequest
        from prism_core.core.config import settings
        PRISM_CORE_AVAILABLE = True
    except ImportError:
        PRISM_CORE_AVAILABLE = False

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VectorSearchTester:
    def __init__(self):
        self.weaviate_url = os.getenv('WEAVIATE_URL', 'http://weaviate:8080')
        self.class_prefix = os.getenv('CLASS_PREFIX', 'KOSHA')
        
        # GraphQL endpoint
        self.graphql_url = f"{self.weaviate_url}/v1/graphql"
        
        # Class mappings
        self.class_mapping = {
            "history": f"{self.class_prefix}History",
            "compliance": f"{self.class_prefix}Compliance", 
            "research": f"{self.class_prefix}Research"
        }
        
        # Test scenarios for different domains
        self.test_scenarios = {
            "history": [
                {
                    "query": "ÏïïÎ†• Ïù¥ÏÉÅ Î¨∏Ï†ú",
                    "description": "ÏïïÎ†• Í¥ÄÎ†® Ïù¥ÏÉÅ ÏÉÅÌô© Í≤ÄÏÉâ",
                    "expected_keywords": ["pressure", "ÏïïÎ†•", "anomaly", "Ïù¥ÏÉÅ"]
                },
                {
                    "query": "Ïò®ÎèÑ Ï†úÏñ¥ ÏãúÏä§ÌÖú Ïò§ÏûëÎèô",
                    "description": "Ïò®ÎèÑ Í¥ÄÎ†® Î¨∏Ï†ú Í≤ÄÏÉâ",
                    "expected_keywords": ["temperature", "Ïò®ÎèÑ", "control", "Ï†úÏñ¥", "malfunction", "Ïò§ÏûëÎèô"]
                },
                {
                    "query": "CVD Ï±îÎ≤Ñ Ïò®ÎèÑ ÏÉÅÏäπ",
                    "description": "CVD Ï±îÎ≤Ñ Ïò®ÎèÑ Í¥ÄÎ†® Í≤ÄÏÉâ",
                    "expected_keywords": ["CVD", "chamber", "Ï±îÎ≤Ñ", "temperature", "Ïò®ÎèÑ"]
                },
                {
                    "query": "Etching Machine pressure monitoring",
                    "description": "Ïó£Ïπ≠ Î®∏Ïã† ÏïïÎ†• Î™®ÎãàÌÑ∞ÎßÅ Í¥ÄÎ†® Í≤ÄÏÉâ (ÏòÅÏñ¥)",
                    "expected_keywords": ["Etching", "Machine", "pressure", "monitoring"]
                },
                {
                    "query": "agent interaction workflow",
                    "description": "ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌò∏ÏûëÏö© ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í≤ÄÏÉâ",
                    "expected_keywords": ["agent", "interaction", "workflow", "orchestration"]
                }
            ],
            "compliance": [
                {
                    "query": "ÏïàÏ†Ñ Í∑úÏ†ï",
                    "description": "ÏïàÏ†Ñ Í∑úÏ†ï Í¥ÄÎ†® Î¨∏ÏÑú Í≤ÄÏÉâ",
                    "expected_keywords": ["ÏïàÏ†Ñ", "Í∑úÏ†ï", "safety", "regulation"]
                },
                {
                    "query": "Í∞úÏù∏Î≥¥Ìò∏Íµ¨ Ï∞©Ïö©",
                    "description": "Í∞úÏù∏Î≥¥Ìò∏Íµ¨ Í¥ÄÎ†® Í∑úÏ†ï Í≤ÄÏÉâ",
                    "expected_keywords": ["Í∞úÏù∏Î≥¥Ìò∏Íµ¨", "Ï∞©Ïö©", "PPE", "protection"]
                }
            ]
        }

    def search_domain(self, domain: str, query: str, top_k: int = 3) -> Dict[str, Any]:
        """ÌäπÏ†ï ÎèÑÎ©îÏù∏ÏóêÏÑú Î≤°ÌÑ∞ Í≤ÄÏÉâ ÏàòÌñâ"""
        class_name = self.class_mapping.get(domain)
        if not class_name:
            return {"success": False, "error": f"Unknown domain: {domain}"}
        
        # GraphQL query for nearText search
        graphql_query = {
            "query": f'''
            {{
                Get {{
                    {class_name}(
                        nearText: {{
                            concepts: ["{query}"]
                        }}
                        limit: {top_k}
                    ) {{
                        title
                        content
                        metadata
                        _additional {{
                            id
                            certainty
                            distance
                            vector
                        }}
                    }}
                }}
            }}
            '''
        }
        
        try:
            response = requests.post(
                self.graphql_url,
                json=graphql_query,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if "errors" in data:
                    return {"success": False, "error": f"GraphQL errors: {data['errors']}"}
                
                results = data.get("data", {}).get("Get", {}).get(class_name, [])
                return {"success": True, "results": results}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"Request failed: {str(e)}"}

    def test_domain_search(self, domain: str, test_cases: List[Dict]) -> Dict[str, Any]:
        """ÌäπÏ†ï ÎèÑÎ©îÏù∏ÏóêÏÑú Í≤ÄÏÉâ ÌÖåÏä§Ìä∏ ÏàòÌñâ"""
        logger.info(f"üîç Testing {domain} domain searches...")
        
        results = {
            "domain": domain,
            "total_tests": len(test_cases),
            "successful_tests": 0,
            "failed_tests": 0,
            "test_results": []
        }
        
        for i, test_case in enumerate(test_cases, 1):
            logger.info(f"  Test {i}/{len(test_cases)}: {test_case['description']}")
            logger.info(f"  Query: '{test_case['query']}'")
            
            try:
                # Execute search
                response = self.search_domain(domain, test_case["query"], 3)
                
                if response["success"]:
                    search_results = response.get("results", [])
                    logger.info(f"  ‚úÖ Found {len(search_results)} results")
                    
                    test_result = {
                        "test_case": test_case,
                        "status": "success",
                        "results_count": len(search_results),
                        "results": []
                    }
                    
                    # Analyze results
                    for idx, result in enumerate(search_results, 1):
                        # Handle both GraphQL and direct API response formats
                        if "properties" in result:
                            properties = result["properties"]
                        else:
                            properties = result
                        
                        additional = result.get("_additional", {})
                        certainty = additional.get("certainty", 0)
                        distance = additional.get("distance", 1)
                        vector = additional.get("vector")
                        
                        title = result.get('title') or properties.get('title', 'N/A')
                        content = result.get('content') or properties.get('content', '')
                        metadata_raw = result.get('metadata') or properties.get('metadata', '{}')
                        
                        # Parse metadata if it's a string
                        try:
                            metadata = json.loads(metadata_raw) if isinstance(metadata_raw, str) else metadata_raw
                        except:
                            metadata = {}
                        
                        result_info = {
                            "rank": idx,
                            "title": title,
                            "certainty": certainty,
                            "distance": distance,
                            "has_vector": vector is not None and len(vector) > 0 if vector else False,
                            "content_preview": content[:200] + "..." if len(content) > 200 else content,
                            "metadata": metadata
                        }
                        
                        test_result["results"].append(result_info)
                        
                        logger.info(f"    [{idx}] {title}")
                        logger.info(f"        Certainty: {certainty:.4f}, Distance: {distance:.4f}")
                        logger.info(f"        Vector: {'‚úÖ' if result_info['has_vector'] else '‚ùå'}")
                        logger.info(f"        Preview: {content[:100]}...")
                    
                    results["successful_tests"] += 1
                    results["test_results"].append(test_result)
                    
                else:
                    error_msg = response.get("error", "Unknown error")
                    logger.error(f"  ‚ùå Search failed: {error_msg}")
                    results["failed_tests"] += 1
                    results["test_results"].append({
                        "test_case": test_case,
                        "status": "failed",
                        "error": error_msg
                    })
                    
            except Exception as e:
                logger.error(f"  ‚ùå Exception occurred: {str(e)}")
                results["failed_tests"] += 1
                results["test_results"].append({
                    "test_case": test_case,
                    "status": "error",
                    "error": str(e)
                })
            
            logger.info("")  # Empty line for readability
        
        return results

    def run_all_tests(self) -> Dict[str, Any]:
        """Î™®Îì† ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        logger.info("=" * 80)
        logger.info("Vector Search Functionality Test")
        logger.info("=" * 80)
        
        all_results = {
            "total_domains": len(self.test_scenarios),
            "domain_results": {},
            "summary": {
                "total_tests": 0,
                "successful_tests": 0,
                "failed_tests": 0
            }
        }
        
        # Test each domain
        for domain, test_cases in self.test_scenarios.items():
            domain_results = self.test_domain_search(domain, test_cases)
            all_results["domain_results"][domain] = domain_results
            
            # Update summary
            all_results["summary"]["total_tests"] += domain_results["total_tests"]
            all_results["summary"]["successful_tests"] += domain_results["successful_tests"]
            all_results["summary"]["failed_tests"] += domain_results["failed_tests"]
        
        return all_results

    def print_summary(self, results: Dict[str, Any]):
        """ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•"""
        logger.info("=" * 80)
        logger.info("TEST SUMMARY")
        logger.info("=" * 80)
        
        summary = results["summary"]
        logger.info(f"üìä Total Tests: {summary['total_tests']}")
        logger.info(f"‚úÖ Successful: {summary['successful_tests']}")
        logger.info(f"‚ùå Failed: {summary['failed_tests']}")
        
        success_rate = (summary['successful_tests'] / summary['total_tests']) * 100 if summary['total_tests'] > 0 else 0
        logger.info(f"üìà Success Rate: {success_rate:.1f}%")
        
        logger.info("\nDomain Breakdown:")
        for domain, domain_results in results["domain_results"].items():
            domain_success_rate = (domain_results['successful_tests'] / domain_results['total_tests']) * 100 if domain_results['total_tests'] > 0 else 0
            logger.info(f"  {domain.upper()}: {domain_results['successful_tests']}/{domain_results['total_tests']} ({domain_success_rate:.1f}%)")
        
        # Vector analysis
        logger.info("\nVector Analysis:")
        total_results_with_vectors = 0
        total_results = 0
        
        for domain_results in results["domain_results"].values():
            for test_result in domain_results["test_results"]:
                if test_result["status"] == "success":
                    for result in test_result["results"]:
                        total_results += 1
                        if result["has_vector"]:
                            total_results_with_vectors += 1
        
        if total_results > 0:
            vector_rate = (total_results_with_vectors / total_results) * 100
            logger.info(f"  Vectorized Results: {total_results_with_vectors}/{total_results} ({vector_rate:.1f}%)")
        
        logger.info("=" * 80)
        
        # Overall assessment
        if success_rate >= 90 and (total_results_with_vectors / total_results * 100 if total_results > 0 else 0) >= 90:
            logger.info("üéâ EXCELLENT: Vector search is working perfectly!")
        elif success_rate >= 70:
            logger.info("‚úÖ GOOD: Vector search is working well with minor issues")
        elif success_rate >= 50:
            logger.info("‚ö†Ô∏è  NEEDS IMPROVEMENT: Vector search has some issues")
        else:
            logger.info("‚ùå POOR: Vector search needs significant fixes")

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    tester = VectorSearchTester()
    
    try:
        # Run all tests
        results = tester.run_all_tests()
        
        # Print summary
        tester.print_summary(results)
        
        # Save detailed results (optional)
        try:
            with open('/tmp/vector_search_test_results.json', 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            logger.info("üìÅ Detailed results saved to /tmp/vector_search_test_results.json")
        except Exception as e:
            logger.warning(f"Could not save detailed results: {e}")
        
        # Exit with appropriate code
        if results["summary"]["failed_tests"] == 0:
            logger.info("üéâ All tests passed!")
            sys.exit(0)
        else:
            logger.warning(f"‚ö†Ô∏è  {results['summary']['failed_tests']} tests failed")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå Fatal error during testing: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()