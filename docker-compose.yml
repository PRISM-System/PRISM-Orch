# Environment variable defaults
x-env-defaults: &env-defaults
  USE_LOCAL_PRISM_CORE: ${USE_LOCAL_PRISM_CORE:-true}
  PRISM_CORE_VERSION: ${PRISM_CORE_VERSION:-main}

services:
  app:
    build:
      context: .
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        USE_LOCAL_PRISM_CORE: "${USE_LOCAL_PRISM_CORE:-true}"
        PRISM_CORE_VERSION: "${PRISM_CORE_VERSION:-main}"
    container_name: prism-orch-app
    env_file:
      - .env
    ports:
      - "8100:8100"
    volumes:
      - ./src:/app/src
      - ./dev:/app/dev
      - ../prism-core/prism_core:/app/prism_core
    environment:
      - PRISM_CORE_BASE_URL=${PRISM_CORE_BASE_URL}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - VECTOR_ENCODER_MODEL=${VECTOR_ENCODER_MODEL}
      - VECTOR_DIM=${VECTOR_DIM}
      - APP_HOST=0.0.0.0
      - APP_PORT=8100
    depends_on:
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks:
      - prism-shared-network

  weaviate:
    image: semitechnologies/weaviate:1.24.1
    container_name: prism-weaviate
    env_file:
      - .env
    ports:
      - "${WEAVIATE_PORT:-18080}:8080"
    # 호스트에서 접근할 때는 localhost:18080, 컨테이너 내부에서는 weaviate:8080
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
      CLUSTER_HOSTNAME: 'node1'
      # API Key 설정 (필요한 경우)
      AUTHENTICATION_APIKEY_ENABLED: '${WEAVIATE_API_KEY_ENABLED:-false}'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY:-}'
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    depends_on:
      - t2v-transformers
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    networks:
      - prism-shared-network

  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1
    container_name: prism-t2v-transformers
    ports:
      - "8081:8080"
    environment:
      ENABLE_CUDA: '1'
      CUDA_VISIBLE_DEVICES: '0'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - prism-shared-network

  seed:
    build:
      context: .
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        USE_LOCAL_PRISM_CORE: "${USE_LOCAL_PRISM_CORE:-true}"
        PRISM_CORE_VERSION: "${PRISM_CORE_VERSION:-main}"
    container_name: prism-orch-seed
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./dev:/app/dev
      - ../prism-core/prism_core:/app/prism_core
    environment:
      - APP_BASE_URL=http://app:8100
    entrypoint: ["python", "dev/seed_vector_dbs.py"]
    depends_on:
      - app
    networks:
      - prism-shared-network

  kosha-processor:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            git \
            && rm -rf /var/lib/apt/lists/*
        
        # Conditional prism-core installation
        ARG USE_LOCAL_PRISM_CORE=false
        ARG PRISM_CORE_VERSION=main
        RUN if [ "$USE_LOCAL_PRISM_CORE" = "false" ]; then \
            echo "Installing prism-core from GitHub: $PRISM_CORE_VERSION" && \
            pip install --no-cache-dir "prism_core @ git+https://github.com/PRISM-System/prism-core.git@$PRISM_CORE_VERSION"; \
        else \
            echo "Using local prism-core via volume mount"; \
        fi
        
        # Install minimal dependencies for KOSHA processor
        RUN pip install --no-cache-dir \
            requests \
            markitdown[pdf] \
            openai \
            pydantic-settings
        
        # Copy application files and source code
        COPY dev/kosha_pdf_processor_rag.py /app/
        COPY assets/kosha_guidance_download_links.json /app/assets/
        COPY src/ /app/src/
        
        CMD ["python", "kosha_pdf_processor_rag.py"]
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        USE_LOCAL_PRISM_CORE: "${USE_LOCAL_PRISM_CORE:-true}"
        PRISM_CORE_VERSION: "${PRISM_CORE_VERSION:-main}"
    container_name: prism-kosha-processor
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./assets:/app/assets
      - ./dev:/app/dev
      - ../prism-core/prism_core:/app/prism_core
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAX_DOCUMENTS=${MAX_DOCUMENTS:-}
      - ENCODER_MODEL=${VECTOR_ENCODER_MODEL:-sentence-transformers/paraphrase-multilingual-mpnet-base-v2}
      - VECTOR_DIM=${VECTOR_DIM:-768}
      - CLASS_PREFIX=${CLASS_PREFIX:-KOSHA}
    depends_on:
      - weaviate
      - app
    restart: no
    networks: 
      - prism-shared-network

  agent-history-uploader:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Conditional prism-core installation
        ARG USE_LOCAL_PRISM_CORE=false
        ARG PRISM_CORE_VERSION=main
        RUN if [ "$USE_LOCAL_PRISM_CORE" = "false" ]; then \
            echo "Installing prism-core from GitHub: $PRISM_CORE_VERSION" && \
            pip install --no-cache-dir "prism_core @ git+https://github.com/PRISM-System/prism-core.git@$PRISM_CORE_VERSION"; \
        else \
            echo "Using local prism-core via volume mount"; \
        fi
        
        # Install minimal dependencies including OpenAI
        RUN pip install --no-cache-dir requests openai
        
        # Copy application files and source code
        COPY dev/agent_history_uploader.py /app/
        COPY assets/agent_interaction_scenarios.json /app/assets/
        COPY src/ /app/src/
        
        CMD ["python", "agent_history_uploader.py"]
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        USE_LOCAL_PRISM_CORE: "${USE_LOCAL_PRISM_CORE:-true}"
        PRISM_CORE_VERSION: "${PRISM_CORE_VERSION:-main}"
    container_name: prism-agent-history-uploader
    env_file:
      - .env
    volumes:
      - ../prism-core/prism_core:/app/prism_core
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VLLM_MODEL=${VLLM_MODEL:-gpt-3.5-turbo}
      - CLASS_PREFIX=${CLASS_PREFIX:-ORCH}
    depends_on:
      - weaviate
      - app
    restart: no
    networks:
      - prism-shared-network

  vector-search-tester:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Install Python dependencies based on local/remote prism-core usage
        ARG GITHUB_TOKEN
        ARG USE_LOCAL_PRISM_CORE=false
        ARG PRISM_CORE_VERSION=main
        RUN if [ "$USE_LOCAL_PRISM_CORE" = "false" ]; then \
            echo "Installing prism-core from GitHub: $PRISM_CORE_VERSION" && \
            pip install --no-cache-dir "prism_core @ git+https://github.com/PRISM-System/prism-core.git@$PRISM_CORE_VERSION"; \
        else \
            echo "Using local prism-core via volume mount"; \
        fi
        
        # Install minimal dependencies
        RUN pip install --no-cache-dir requests pydantic
        
        # Copy test script
        COPY dev/vector_search_tester.py /app/
        COPY src/ /app/src/
        
        CMD ["python", "vector_search_tester.py"]
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        USE_LOCAL_PRISM_CORE: "${USE_LOCAL_PRISM_CORE:-true}"
        PRISM_CORE_VERSION: "${PRISM_CORE_VERSION:-main}"
    container_name: prism-vector-search-tester
    env_file:
      - .env
    volumes:
      - ../prism-core/prism_core:/app/prism_core
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - CLASS_PREFIX=${CLASS_PREFIX:-KOSHA}
    depends_on:
      - weaviate
      - agent-history-uploader
    restart: no
    networks:
      - prism-shared-network

  vector-search-web:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Install web dependencies
        RUN pip install --no-cache-dir flask requests
        
        # Copy web interface
        COPY dev/vector_search_web.py /app/
        
        CMD ["python", "vector_search_web.py"]
    container_name: prism-vector-search-web
    env_file:
      - .env
    ports:
      - "8200:8200"
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - CLASS_PREFIX=${CLASS_PREFIX:-KOSHA}
    depends_on:
      - weaviate
    restart: no
    networks:
      - prism-shared-network


volumes:
  weaviate_data:

networks:
  prism-shared-network:
    external: true

# Usage:
# 1) export GITHUB_TOKEN=...; docker compose up -d --build weaviate app
# 2) docker compose run --rm seed
# 3) docker compose run --rm kosha-processor        # Upload KOSHA documents to compliance domain
# 4) docker compose run --rm agent-history-uploader # Upload agent interaction history to history domain
# 5) docker compose run --rm vector-search-tester   # Test vector-based search functionality
# 6) docker compose up -d vector-search-web          # Start web interface for interactive search
#
# Web Interfaces:
# - Interactive Vector Search UI: http://localhost:8200 (search with custom queries) ✅
# - View all objects with vectors: http://localhost:18080/v1/objects?include=vector ✅
# - Browse Weaviate schema: http://localhost:18080/v1/schema ✅
# - View KOSHA compliance documents: http://localhost:18080/v1/objects?class=KOSHACompliance&include=vector ✅
# - View agent interaction history: http://localhost:18080/v1/objects?class=KOSHAHistory&include=vector ✅
# - Direct Weaviate API explorer: http://localhost:18080/v1 ✅
# 7) docker compose down
#
# Options:
# - MAX_DOCUMENTS=10 docker compose run --rm kosha-processor     # Process limited KOSHA documents
# - CLASS_PREFIX=Custom docker compose run --rm kosha-processor  # Use custom class prefix for KOSHA
# - CLASS_PREFIX=Custom docker compose run --rm agent-history-uploader  # Use custom prefix for agent history
#
# PRISM-Core Version Control:
# Local Development (Default):
# - USE_LOCAL_PRISM_CORE=true (default): Uses ../prism-core/prism_core via volume mount
# - Changes are immediately reflected without rebuild
#
# Production/Testing with GitHub versions:
# - USE_LOCAL_PRISM_CORE=false PRISM_CORE_VERSION=main: Latest from main branch
# - USE_LOCAL_PRISM_CORE=false PRISM_CORE_VERSION=v0.2.8: Specific tag
# - USE_LOCAL_PRISM_CORE=false PRISM_CORE_VERSION=feature-branch: Specific branch
#
# Examples:
# docker compose --env-file <(echo "USE_LOCAL_PRISM_CORE=false") --env-file <(echo "PRISM_CORE_VERSION=main") up --build
# USE_LOCAL_PRISM_CORE=false PRISM_CORE_VERSION=v0.2.9 docker compose up --build 